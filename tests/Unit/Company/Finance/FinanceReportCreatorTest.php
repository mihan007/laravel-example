<?php

namespace Tests\Unit;

use App\Domain\Company\Models\Company;
use App\Domain\Finance\FinanceReportCreator;
use App\Domain\Finance\Models\FinanceReport;
use App\Domain\Finance\Models\Payment;
use App\Domain\ProxyLead\Models\ProxyLeadGoalCounter;
use Carbon\Carbon;
use Tests\TestCase;

class FinanceReportCreatorTest extends TestCase
{
    /** @var Carbon */
    protected $period;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->period = now()->subMonth()->startOfMonth();
    }

    /** @test */
    public function it_should_create_report_for_certain_period() :void
    {
        $this->truncate(Company::class);
        $this->truncate(FinanceReport::class, false);

        $company = Company::factory()->create();

        $this->assertSame(0, FinanceReport::getQuery()->count());

        (new FinanceReportCreator($company, $this->period))->create();

        $this->assertSame(1, FinanceReport::getQuery()->count());
        $this->assertSame($this->period->toDateString(), FinanceReport::first()->for_date);
    }

    /** @test */
    public function if_count_of_target_leads_for_ceration_period_was_positive_it_will_store_it_correct() :void
    {
        $this->truncate(Company::class);
        $this->truncate(FinanceReport::class, false);
        $this->truncate(ProxyLeadGoalCounter::class, false);

        $company = Company::factory()->create();

        $request = ['company_id' => $company->id, 'target' => 20, 'for_date' => (clone $this->period)->subMonth()->toDateString()];
        ProxyLeadGoalCounter::factory()->create($request);
        $request['for_date'] = (clone $this->period)->addDay()->toDateString();
        ProxyLeadGoalCounter::factory()->create($request);
        $request['for_date'] = (clone $this->period)->addDay(2)->toDateString();
        ProxyLeadGoalCounter::factory()->create($request);

        (new FinanceReportCreator($company, $this->period))->create();

        $this->assertSame(40, FinanceReport::first()->lead_count);
    }

    /** @test */
    public function it_currect_set_company_lead_cost_to_the_report() :void
    {
        $this->truncate(Company::class);
        $this->truncate(FinanceReport::class, false);

        $company = Company::factory()->create();

        (new FinanceReportCreator($company, $this->period))->create();

        $this->assertSame($company->lead_cost, FinanceReport::first()->lead_cost);
    }

    /** @test */
    public function it_correct_count_and_set_how_much_money_company_have_to_pay_to_us() :void
    {
        $this->truncate(Company::class);
        $this->truncate(FinanceReport::class, false);
        $this->truncate(ProxyLeadGoalCounter::class, false);

        $company = Company::factory()->create();

        $request = ['company_id' => $company->id, 'target' => 20, 'for_date' => (clone $this->period)->toDateString()];
        $proxyLeadCounter = ProxyLeadGoalCounter::factory()->create($request);

        (new FinanceReportCreator($company, $this->period))->create();

        $this->assertSame((float) $company->lead_cost * $proxyLeadCounter->target, FinanceReport::first()->to_pay);
    }

    /** @test */
    public function it_will_correct_set_status() :void
    {
        $this->truncate(Company::class);
        $this->truncate(FinanceReport::class, false);

        $compnay = Company::factory()->create();

        (new FinanceReportCreator($compnay, $this->period))->create();

        $this->assertSame($compnay->getFinanceStatus($this->period), FinanceReport::first()->status);
    }

    /** @test */
    public function it_will_correct_set_paid_amount() :void
    {
        $this->truncate(Company::class);
        $this->truncate(FinanceReport::class, false);

        $company = Company::factory()->create();
        (new FinanceReportCreator($company, $this->period))->create();

        $financeReport = FinanceReport::first();

        $this->assertSame((float) 0, $financeReport->paid);

        Payment::factory()->count(2)->create(['finance_report_id' => $financeReport->id, 'amount' => 1000]);

        (new FinanceReportCreator($company, $this->period))->create();

        $this->assertSame((float) 2000, $financeReport->fresh()->paid);
    }

    /** @test */
    public function it_correct_create_reports_for_different_companies() :void
    {
        $this->truncate(Company::class);
        $this->truncate(FinanceReport::class, false);

        $company = Company::factory()->create();
        (new FinanceReportCreator($company, $this->period))->create();

        $company2 = Company::factory()->create();
        (new FinanceReportCreator($company2, $this->period))->create();

        $this->assertSame(2, FinanceReport::getQuery()->count());
        $this->assertSame($company->id, FinanceReport::first()->company_id);
        $this->assertSame($company2->id, FinanceReport::offset(1)->first()->company_id);
    }

    /** @test */
    public function it_correct_create_company_report_for_different_period() :void
    {
        $this->truncate(Company::class);
        $this->truncate(FinanceReport::class, false);

        $company = Company::factory()->create();
        (new FinanceReportCreator($company, $this->period))->create();
        (new FinanceReportCreator($company, (clone $this->period)->subMonth()))->create();

        $this->assertSame(2, FinanceReport::getQuery()->count());
        $this->assertSame($this->period->toDateString(), FinanceReport::first()->for_date);
        $this->assertSame((clone $this->period)->subMonth()->toDateString(), FinanceReport::offset(1)->first()->for_date);
    }
}
