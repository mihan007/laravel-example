<?php

namespace Tests\Unit;

use App\Domain\Account\Models\Account;
use App\Domain\Company\Models\Company;
use App\Domain\ProxyLead\Models\ProxyLead;
use App\Domain\ProxyLead\Models\ProxyLeadSetting;
use Tests\TestCase;

/**
 * Class WebhookTest.
 */
class WebhookTest extends TestCase
{
    protected $zadarma_events = [
        'NOTIFY_START',
        'NOTIFY_OUT_START',
        'NOTIFY_INTERNAL',
        'NOTIFY_ANSWER',
        'NOTIFY_END',
        'NOTIFY_RECORD',
    ];
    protected $zadarma_statuses = [
        'ANSWER',
        'BUSY',
        'CANCEL',
        'NOANSWER',
        'FAILED',
        'NOMONEY',
        'UNALLOCATED_NUMBER',
        'NO_LIMIT',
        'NO_DAY_LIMIT',
        'LINE_LIMIT',
        'NO_MONEY_NO_LIMIT',
    ];

    /** @var \App\Domain\Company\Models\Company */
    protected $company;
    /** @var \App\Domain\ProxyLead\Models\ProxyLeadSetting */
    protected $proxyLeadSetting;
    /** @var \App\Domain\ProxyLead\Models\ProxyLead */
    protected $proxyLead;
    /**
     * @var \App\Domain\Account\Models\Account
     */
    private $account;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->truncate(Company::class, false);
        $this->truncate(ProxyLeadSetting::class, false);
        $this->truncate(ProxyLead::class, false);
        $this->truncate(Account::class, false);

        $this->account = Account::factory()->create();
        $this->company = Company::factory()->create(['account_id' => $this->account->id]);
        $this->proxyLeadSetting = create(
            ProxyLeadSetting::class,
            [
                'company_id' => $this->company->id,
                'match_name' => json_encode(['name2', 'name3']),
                'match_phone' => json_encode(['phone2', 'phone3']),
                'match_info' => json_encode(['info3', 'info4']),
            ]
        );
        $this->proxyLead = ProxyLead::factory()->create(['proxy_lead_setting_id' => $this->proxyLeadSetting->id]);
    }

    /**
     * @test
     */
    public function roistatWrongWebhookTest()
    {
        $this->withExceptionHandling()->post(
            route('api.v1.web-leads.common.store', ['key' => $this->proxyLeadSetting->public_key]),
            [
                'roistat' => '1',
                'city' => 'test',
                'duration' => 1,
                'extra' => [
                    'href' => 'http:://test.url/',
                ],
            ]
        )->assertStatus(200)->assertJson(['status' => 'error']);
    }

    /**
     * @test
     */
    public function roistatCorrectWebhookTest()
    {
        $this->withExceptionHandling()->post(
            route('api.v1.web-leads.common.store', ['key' => $this->proxyLeadSetting->public_key]),
            [
                'callee' => '21312381293712',
                'caller' => '213123813332',
                'roistat' => '1',
                'city' => 'test',
                'duration' => 1,
                'extra' => [
                    'href' => 'http:://test.url/',
                ],
            ]
        )->assertStatus(200)->assertJsonMissing(['error']);
    }
}
