<?php

namespace Tests\Feature\Webhook;

use App\Domain\Account\Models\Account;
use App\Domain\Company\Models\Company;
use App\Domain\ProxyLead\Models\ProxyLead;
use App\Domain\ProxyLead\Models\ProxyLeadSetting;
use Illuminate\Support\Facades\Event;
use Tests\TestCase;

class RoistatTest extends TestCase
{
    /** @var \App\Domain\Company\Models\Company */
    protected $company;
    /** @var ProxyLeadSetting */
    protected $proxyLeadSetting;
    /** @var ProxyLead */
    protected $proxyLead;


    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->truncate(Company::class, false);
        $this->truncate(ProxyLeadSetting::class, false);
        $this->truncate(ProxyLead::class, false);
        $this->truncate(Account::class, false);

        $this->account = Account::factory()->create();
        $this->company = Company::factory()->create(['account_id' => $this->account->id]);
        $this->proxyLeadSetting = create(ProxyLeadSetting::class, ['company_id' => $this->company->id]);
        Event::fake();
    }

    /**
     * @test
     * @dataProvider validRequestDataProvider
     * @param array $requestData
     * @param $phone
     * @param $title
     * @param $extra
     */
    public function webhook_should_work($requestData, $phone, $title, $extra)
    {
        $response = $this->withExceptionHandling()->postJson(
            route('api.v1.web-leads.common.store', ['key' => $this->proxyLeadSetting->public_key]),
            $requestData
        );

        $this->assertEquals(200, $response->getStatusCode());
        $this->assertNotEquals(301, $response->getStatusCode());

        $this->assertEquals($response['status'], 'success');

        $proxyLead = ProxyLead::first();
        $this->assertEquals($phone, $proxyLead->phone);
        $this->assertEquals($title, $proxyLead->title);
        unset($extra['caller']);
        $this->assertEquals($extra, $proxyLead->extra);
    }


    /**
     * @test
     * @dataProvider noPhoneRequestDataProvider
     * @param $requestData
     */
    public function phone_is_required($requestData)
    {
        $response = $this->withExceptionHandling()->postJson(
            route('api.v1.web-leads.common.store', ['key' => $this->proxyLeadSetting->public_key]),
            $requestData
        );

        $this->assertEquals(200, $response->getStatusCode());
        $this->assertNotEquals(301, $response->getStatusCode());

        $response->assertJsonFragment(['status' => 'error'])->assertJsonStructure(['status', 'data' => ['phone']]);

        /** @var \App\Domain\ProxyLead\Models\ProxyLead $proxyLead */
        $proxyLead = ProxyLead::withTrashed()->first();
        $this->assertNotNull($proxyLead->deleted_at);
        $this->assertEquals($requestData, $proxyLead->extra);
    }


    public function validRequestDataProvider()
    {
        $requestData = $this->getRequestData();
        $extra = $requestData;
        unset($extra['caller']);

        $request['valid request'] = [
            'data' => $requestData,
            'phone' => $requestData['caller'],
            'title' => 'Звонок',
            'extra' => $extra
        ];


        return $request;
    }


    public function noPhoneRequestDataProvider()
    {
        $requestData = $this->getRequestData();
        unset($requestData['caller']);
        $extra = $requestData;

        $request['no phone request'] = [
            'data' => $requestData,
            'title' => 'Звонок',
            'extra' => $extra
        ];

        return $request;
    }


    public function getRequestData()
    {
        return [
            'id' => '2726',
            'ip' => '188.244.222.165',
            'city' => 'Саратов',
            'date' => '2020-02-02 09:02:03',
            'link' => 'https://cloud.roistat.com/projects/90460/calltracking/call/2726/file/0d5990065174d3f5a56caa7ed767a2d7',
            'callee' => '7800224633',
            'caller' => '7800224635',
            'domain' => 'саратов.пластиковые-окна-цена.рф',
            'marker' => 'direct72_search_7430030700_пластиков окна',
            'source' => 'call-web-hook',
            'status' => 'ANSWER',
            'country' => 'Россия',
            'file_id' => null,
            'duration' => 94,
            'order_id' => null,
            'referrer' => 'https://yabs.yandex.ru?from=yandex.ru;search&#x2f;touch&#x2f;;web;;23000000;&q=пластиковые+окна&etext=2202.oymoge2czu-hlpdeumewkwsiev-mdxrkg6oymofq8p6whylqdqum6fpxuxeq6r-zdg1oz2p5am5hd210cmx4yw.9ffae07fbe4671506fa25fa91dbd1bf589ecd519',
            'utm_term' => 'пластиков окна',
            'visit_id' => '176368',
            'utm_medium' => 'cpc',
            'utm_source' => 'yandex',
            'first_visit' => '176368',
            'utm_content' => 'mob',
            'landing_page' => 'https://саратов.пластиковые-окна-цена.рф/',
            'utm_campaign' => 'cid|42882828|search',
            'custom_fields' => [],
            'source_level_1' => 'direct72',
            'source_level_2' => 'search',
            'source_level_3' => '7430030700',
            'source_level_4' => 'пластиков окна',
            'roistat_param_1' => null,
            'roistat_param_2' => null,
            'roistat_param_3' => null,
            'roistat_param_4' => null,
            'roistat_param_5' => null,
            'google_client_id' => '1002445936.1580634104',
            'metrika_client_id' => '1580634103218143218',
        ];
    }

}
